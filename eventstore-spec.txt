# Eventstore Interface

# Allgemein
Type Position=number;
Type ID=number; // TODO: wirklich nummerisch?
Type fqid=string; // `collection/id`
Type fqfield=string; // `collection/id/field`
Type Collection=string; // `collection`
Type CollectionField=string; // `collection/field`
Type Model=object;
Type Field=string;
Type Value=any;

Enum EventType {
    Create,
    Update,
    DeleteField,
    Delete,
    Restore,
}

Exception ModelDoesNotExist(fqid);
Exception ModelDoesExist(fqid);
Exception ModelLocked();
Exception InvalidFormat();
Exception MeetingIdNotSpecified();

## Writer

/**
 * Schreibt Events in den Eventstore.
 *
 * @throws ModelDoesNotExist(fqid)
 * @throws ModelLocked(fqid | CollectionField)
 * @throws ModelExists(fqid)
 * @throws InvalidFormat()
 * @throws ModelNotDeleted(fqid)
 */
write(request: WriteRequest): void publishes BulkMetadatapdate

Interface WriteRequest {
    events: (CreateEvent | RestoreEvent | UpdateEvent | DeleteEvent)[];
    information: Object;
    user_id: number;
    locked_fields: {
        <fqid>: Position;
        <CollectionField>: Position;
    }
}

Interface CreateEvent {
    fqid: fqid;
    data: {
        <field>: Value;
    }
}

Interface UpdateEvent {
    fqfields: {
        <fqfield>: Value; // Note: bei Null DeleteFields intern
    }
}

Interface RetoreEvent {
    fqid: fqid;
}

Interface DeleteEvent {
    fqid: fqid;
}

Event FieldUpdatedEvent on topic FieldUpdatedTopic {
    created: fqid[];
    deleted: fqid[];
    updated: fqfield[];
}

## Full Data View

/** Allgemeine Parameter:
 * - position: Wenn gegeben werden Daten zu diesem Zeitpunkt geladen
 * - mapped_fields: Eine Liste an Fields, auf die die Antwort reduziert wird.
 *                Falls diese Liste nicht gegeben ist, wird das volle
 *                Modell zurückgegeben.:
 * - meeting_id:  Für Modelle außer Nutzer, Gremium, Veranstaltung und Config
 *                Ist eine Angabe verpflichtend. Dies beschränkt die Nutzung
 *                auf eine spezifische Veranstaltung.
 *
 * Alle Operationen fügen `meta:position` und `meta:deleted` an.
 */

/**
 * Gibt eine Modellinstanz Gelöschte Instanzen werden nicht zurückgegeben.
 *
 * @throws ModelDoesNotExist
 */
get(model: fqid, position?: Position, mapped_fields?: fields[]): Partial<Model>;

/**
 * Analog zu `get`, gibt jedoch auch gelöschte Objekte zurück.
 *
 * @throws ModelDoesNotExist
 */
getWithDeleted(model: fqid, position?: Position, mapped_fields?: Field[]): Partial<Model>;

/**
 * Gibt mehrere Modellinstanzen aus dem Eventstore zur aktuellen Position
 * zurück. Gelöschte Instanzen werden nicht zurückgegeben.
 *
 * @throws ModelDoesNotExist
 */
getMany(collection: Collection, ids: ID[], position?: Position, mapped_fields?: Field[]): Partial<Model>[];

/**
 * Analog zu `getMany`, gibt jedoch auch gelöschte Instanzen zurück.
 *
 * @throws ModelDoesNotExist
 */
getManyWithDeleted(collection: Collection, ids: ID[], position?: Position, mapped_fields?: Field[]): Partial<Model>[];

// Shortcuts for `filter*` without a filter
/**
 * Gibt alle Modelle einer Collection zurück. Die Veranstaltungsid ist zwingend (s.o.)
 * für einige Collections. Gibt keine gelöscheten Elemente aus.
 *
 * @throws MeetingIdNotSpecified()
 */
getAll(collection: Collection, meeting_id?: ID, position?: Position, mapped_fields?: Field[]): Partial<Model>[];

/**
 * Wie `getAll`, gibt gelöschte und nicht-gelöschte Modelle wieder.
 *
 * @throws MeetingIdNotSpecified()
 */
getAllWithDeleted(collection: Collection, meeting_id?: ID, position?: Position, mapped_fields?: Field[]): Partial<Model>[];

/**
 * Wie `getAll`, gibt jedoch nur gelöschte Modelle wieder.
 *
 * @throws MeetingIdNotSpecified()
 */
getAllOnlyDeleted(collection: Collection, meeting_id?: ID, position?: Position, mapped_fields?: Field[]): Partial<Model>[];

/**
 * Gibt alle Modelle einer Collection (möglicherweise Veranstaltungsspezifisch)
 * wieder, die dem filter-Ausdruck genügen. Für Filtermöglichkeiten: siehe unten.
 *
 * @throws MeetingIdNotSpecified()
 */
filter(collection: Collection, meeting_id?: ID, filter: Filter, position?: Position, mapped_fields?: Field[]): Partial<Model>[]

/**
 * Siehe `filter`. Gibt zurück, ob mindestens ein Modell gefunden wurde.
 *
 * @throws MeetingIdNotSpecified()
 */
exists(collection: Collection, meeting_id?: ID, filter: Filter, position?: Position): {exists: boolean; position: Position;}

/**
 * Siehe `filter`. Gibt die Anzahl an Modellen zurück.
 *
 * @throws MeetingIdNotSpecified()
 */
count(collection: Collection, meeting_id?: ID, filter: Filter, position?: Position): {count: number; position: Position;}

/**
 * Führt einfache Min-Max-Aggregation über numerische Felder aus.
 *
 * @throws MeetingIdNotSpecified()
 * @throws AggregationOperationInvalid(operand, value)
 */
aggregate(collection: Collection, meeting_id?: ID, filter: Filter, aggregate: Aggregate, position?: Position): Value

Type Filter = And | Or | Not | FilterOperator

/**
 * Das eigentliche Filter-predikat. M[field] ist der Wert des Feldes des
 * betrachteten Modells. Für alle Operatoren ist das
 * Prädikat wahr, wenn `M[field] <op> value` wahr ist.
 */
Interface FilterOperator {
    field: Field;
    value: Value | null;
    operator: '==' | '!=' | '<' | '>' | '>=' | '<=';
}

Interface Not {
    not: Filter;
}

Interface And {
    and: Filter[];
}

Interface Or {
    or: Filter[];
}

Interface Aggregate {
    field: Field;
    type: 'min' | 'max';
}

/**
 * Gibt eine sequentielle ID für die gegebene Collection zurück.
 */
getID(collection: Collection): ID
